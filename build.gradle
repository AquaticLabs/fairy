/*
 * MIT License
 *
 * Copyright (c) 2021 Imanity
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        mavenCentral()
    }
}

// Core versioning
version = findProperty("fairy.version")

allprojects {
    apply from: "${rootDir}/gradle/scripts/tasks.gradle"

    if (isNotJavaProject(project)) {
        project.tasks.configureEach { task -> task.enabled = false }
        return
    }
    group = "io.fairyproject"

    repositories {
        mavenCentral()
        maven {
            name = "sonatype-oss-snapshots"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven { url "https://repo.imanity.dev/imanity-libraries/" }
        maven { url "https://nexus.funkemunky.cc/content/repositories/releases/" }
        maven { url "https://jitpack.io" }
        maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
        maven { url "https://repo.viaversion.com/" }
        maven { url "https://maven.enginehub.org/repo/" }
        maven { url "https://repo.papermc.io/repository/maven-public/" }
        flatDir { dir("${this.projectDir.path}/libs") }
    }

    ext {
        relocate = "io.fairyproject.libs."

        // Dependencies
        // TODO - naming rules
        MongoDB_driver_sync = "org.mongodb:mongodb-driver-sync:4.0.4"
        Mongojack = "org.mongojack:mongojack:" + findProperty("mongojack.version")
        Redisson = "org.redisson:redisson:3.13.2"
    }

}

subprojects {
    if (isNotJavaProject(project)) {
        project.tasks.configureEach { task -> task.enabled = false }
        project.tasks.withType(PublishToMavenRepository).configureEach { it.enabled = false }
        return
    }

    if (project.name == "test-plugin" || project.name == "shared") {
        return
    }

    if (project.name != "gradle-plugin" && project.name != "bom" && !project.name.contains("bundles")) {
        version = findProperty("fairy.version")

        apply from: "${rootDir}/gradle/scripts/builder.gradle"
        if (project.name.contains("bootstrap")) {
            apply from: "${rootDir}/gradle/scripts/bootstrap.gradle"
        } else {
            apply from: "${rootDir}/gradle/scripts/basic.gradle"
            if (project.name.endsWith("-platform")) {
                apply from: "${rootDir}/gradle/scripts/platform.gradle"
            } else if (!project.name.endsWith("-tests")) {
                apply from: "${rootDir}/gradle/scripts/module.gradle"
            } else {
                version = project(":").version
            }
        }
    }

    apply from: "${rootDir}/gradle/scripts/publish/publish.gradle"
}

static boolean isNotJavaProject(Project project) {
    return project.buildFile == null || !project.buildFile.exists()
}