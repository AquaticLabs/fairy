repositories {
    gradlePluginPortal()
}

version = "1.1.0b3"

apply plugin: "java-gradle-plugin"
apply plugin: "maven-publish"
apply plugin: "com.gradle.plugin-publish"

gradlePlugin {
    plugins {
        fairy {
            id = "io.fairyproject"
            implementationClass = "io.fairyproject.gradle.FairyPlugin"
        }
    }
}

publishing {
    repositories {
        maven {
            name = 'localPluginRepository'
            url = '../libs/local'
        }
    }
}

pluginBundle {
    tags = ["fairy", "bukkit", "minecraft"]

    plugins {
        fairy {
            displayName = "Fairy Gradle Plugin"
            description = "The fairy gradle plugin"
            website = "https://github.com/FairyProject/fairy"
            vcsUrl = "https://github.com/FairyProject/fairy"
        }
    }
}

repositories {
    maven { url "https://maven.imanity.dev/repository/imanity-libraries/" }
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    compileOnly gradleApi()
    compileOnly 'org.codehaus.groovy:groovy-all:3.0.9'

    compileOnly "org.projectlombok:lombok:1.18.22"
    annotationProcessor "org.projectlombok:lombok:1.18.22"
    compileOnly "org.jetbrains:annotations:19.0.0"
    annotationProcessor "org.jetbrains:annotations:19.0.0"

    implementation "com.google.code.gson:gson:" + findProperty("gson.version")
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-commons:9.2'
    implementation 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'

    compileOnly project(":shared")

    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.7.0"
}

// Yeah this is hacky... but to prevent gradle from generating a problematic maven pom we have to shade it
def config = configurations.maybeCreate("shared")
config.dependencies.add(project.dependencies.create(project(":shared")))
List<Object> list = new ArrayList<>();
for (File file : config) {
    list.add(file.isDirectory() ? file : project.zipTree(file));
}

jar.from(list)

test {
    useJUnitPlatform()
}