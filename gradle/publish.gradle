apply plugin: "maven-publish"

project.afterEvaluate {
    publishing {
        publications {
            production(MavenPublication) { publication ->
                from project.shadow.component(publication)
                pom {
                    name = "Fairy " + project.name
                }
            }

            snapshot(MavenPublication) { publication ->
                from project.shadow.component(publication)
                pom {
                    name = "Fairy " + project.name
                    version = project.version + "-SNAPSHOT"
                }
            }

            latest(MavenPublication) { publication ->
                from project.shadow.component(publication)
                pom {
                    name = "Fairy " + project.name
                    version = "latest"
                }
            }
        }

        repositories {
            maven {
                name "Dev"
                url "$rootDir/libs/local"
            }

            maven {
                name "Production"
                url "https://maven.imanity.dev/repository/imanity-libraries/"
                credentials {
                    username findProperty("imanityLibrariesUsername").toString()
                    password findProperty("imanityLibrariesPassword").toString()
                }
            }
        }
    }

    tasks.withType(AbstractPublishToMaven).forEach(t -> {
        t.dependsOn(shadowJar)
    })

    /* -------------------------------------------------------
     * Last edit: 03/03/2022
     * Fixes modules not properly being published with
     * the module.json
     * ------------------------------------------------------- */
    def moduleTask = project.tasks.findByName("module")
    if (moduleTask != null) {
        moduleTask.finalizedBy(publishAllPublicationsToDevRepository)
    } else {
        shadowJar.finalizedBy(publishAllPublicationsToDevRepository)
    }
    def publishSnapshotDev = project.tasks.findByName("publishSnapshotDev")
    if (publishSnapshotDev != null)
        publishSnapshotDev.finalizedBy(publishSnapshotPublicationToDevRepository)

    def publishSnapshotProduction = project.tasks.findByName("publishSnapshotProduction")
    if (publishSnapshotProduction != null)
        publishSnapshotProduction.finalizedBy(publishSnapshotPublicationToProductionRepository)
}
