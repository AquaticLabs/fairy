boolean isIndependentModule() {
    return project.name.contains("bootstrap") || project.name == "gradle-plugin"
}

boolean isExludedModule() {
    return project.name == "annotations" || project.name == "annotationProcessor" || project.name == "gradle-plugin"
}

ext {
    archieveName = project.name
}

apply plugin: "java-library"
if (project.name != "gradle-plugin") {
    if (!isIndependentModule()) {
        apply plugin: "io.freefair.aspectj.post-compile-weaving"
    }
    apply plugin: "com.github.johnrengelman.shadow"

    tasks.jar.configure {
        classifier = "sources"
    }
    tasks.shadowJar.configure {
        classifier = null
    }

    tasks.shadowJar.destinationDirectory.set(file("$rootDir/build/libs"))
    tasks.shadowJar.archiveFileName.set(project.ext.archieveName + ".jar")
}

configurations {
    compileOnly {
        canBeResolved = true
    }
}
processResources {
    expand projectVersion: project.version
}

if (project.name != "gradle-plugin") {
    shadowJar.dependsOn build
}
sourceCompatibility = targetCompatibility = "1.8"
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.18.22"
    annotationProcessor "org.projectlombok:lombok:1.18.22"
    compileOnly "org.jetbrains:annotations:19.0.0"
    annotationProcessor "org.jetbrains:annotations:19.0.0"

    compileOnly JacksonCore
    compileOnly JacksonDataBind
    compileOnly AspectJRuntime
    compileOnly "javax.persistence:javax.persistence-api:2.2"

    if (project.name.contains("-")) {
        def names = project.name.split("-")

        if (names[1] == "platform") {
            if (names[0] != "core") {
                api project(":io.fairyproject.platforms:core-platform")
            }
        } else if (!isExludedModule()) {
            def platformName = names[0]

            compileOnly project(":io.fairyproject.platforms:$platformName-platform")
        }
    } else if (!isExludedModule()) {
        compileOnly project(":io.fairyproject.platforms:core-platform")
    }

    compileOnly "com.google.guava:guava:" + findProperty("guava.version")
    compileOnly "com.google.code.gson:gson:" + findProperty("gson.version")
    compileOnly "org.yaml:snakeyaml:" + findProperty("yaml.version")
    compileOnly "org.apache.logging.log4j:log4j-core:" + findProperty("log4j.version")
    compileOnly "com.github.ben-manes.caffeine:caffeine:" + findProperty("caffeine.version")
    compileOnly "org.apache.commons:commons-lang3:3.11"
    compileOnly "commons-io:commons-io:2.7"
    compileOnly "it.unimi.dsi:fastutil:8.1.0"
    compileOnly "net.md-5:bungeecord-chat:1.16-R0.3"

    // Test dependencies
    testImplementation "junit:junit:4.13"
    testImplementation "org.junit.platform:junit-platform-runner:1.0.3"
    testImplementation "org.junit.platform:junit-platform-suite-api:1.0.3"
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation "com.google.jimfs:jimfs:1.1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
}
sourceSets {
    test.compileClasspath += configurations.compileOnly
    test.runtimeClasspath += configurations.compileOnly
}
if (!isIndependentModule()) {
    compileJava.ajc.options.compilerArgs += "-showWeaveInfo"
    compileJava.ajc.options.compilerArgs += "-verbose"

    compileTestJava.ajc.options.aspectpath.from sourceSets.main.output

    if (!project.name.contains("platform")) {
        shadowJar {
            dependencies {
                exclude(project(":io.fairyproject.platforms:core-platform"))
                exclude(dependency(AspectJRuntime))
            }
        }
    }
}