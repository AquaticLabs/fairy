import com.google.common.io.Files
import io.fairyproject.gradle.FairyVersion
import org.yaml.snakeyaml.Yaml

abstract class VersionModificationTask extends DefaultTask {

    @Input
    @Option(option = "type", description = "The type of versioning to increase/decrease")
    String type

    @Input
    @Option(option = "offset", description = "The offset of versioning to increase/decrease")
    String offset

    @TaskAction
    void doModification() {
        if (project.buildFile != null && project.buildFile.exists()) {
            def offset = Integer.parseInt(offset)

            def v = project.buildFile.getText().find(project.version)
            def version = FairyVersion.parse(v)

            switch (type.toLowerCase()) {
                case "b":
                case "build":
                    version.addBuild(offset)
                    break
                case "r":
                case "revision":
                    version.addRevision(offset)
                    break
                case "mi":
                case "minor":
                    version.addMinor(offset)
                    break
                case "ma":
                case "major":
                    version.addMajor(offset)
                    break
            }

            String s = project.buildFile.getText().replaceFirst("version = \"$v\"","version = \""+version.toString()+"\"")
            project.buildFile.setText(s)

            println "Updating project $project.name from $v to $version"
        }
    }

}

abstract class DownloadBukkit extends DefaultTask {

    @Input
    @Option(option = "compile", description = "Should you recompile fairy for the debug")
    boolean compile = true

    @TaskAction
    void download() {
        def folder = project.file("debug/spigots")
        if (!folder.exists())
            folder.mkdirs()

        def config = project.file("debug/spigots/spigot.yml")
        if (!config.exists()) {
            config.setText("version: \"1.8.8\"\nbuild: \"444\"")
        }

        Yaml yaml = new Yaml()
        Map<String, Object> map = yaml.load(config.getText())

        def version = map.get("version")
        def build = map.get("build")

        def file = project.file("debug/spigots/${version}-${build}.jar")
        if (!file.exists()) {
            HttpURLConnection connection = new URL("https://papermc.io/api/v2/projects/paper/versions/$version/builds/$build/downloads/paper-$version-${build}.jar").openConnection() as HttpURLConnection

            connection.setDoInput(true)
            def inputStream = connection.getInputStream()
            FileOutputStream outputStream = new FileOutputStream(file)

            int bytesRead
            byte[] buffer = new byte[4096];
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead)
            }

            outputStream.close()
            inputStream.close()

            println "Downloaded $version-${build}.jar"
        }

        def eula = project.file("debug/eula.txt")
        if (!eula.exists())
            eula.setText("#By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).\n" +
                    "#and also agreeing that tacos are tasty.\n" +
                    "#Tue Jun 22 20:59:57 ICT 2021\n" +
                    "eula=true\n")

        project.tasks.runDebugBukkit.mainClass.set("-jar")
        project.tasks.runDebugBukkit.args = [
                file.toPath().toString()
        ]
        project.tasks.runDebugBukkit.standardInput = System.in
        project.tasks.runDebugBukkit.workingDir("debug")

        def pluginProject = project.childProjects["test-plugin"]
        if (pluginProject != null) {
            def jar = new File(pluginProject.buildDir, "libs/test-plugin-all.jar")

            project.tasks.runDebugBukkit.inputs.file(jar)

            project.file("debug/plugins").mkdirs()
            Files.copy(jar, project.file("debug/plugins/debugPlugin.jar"))
        }
    }
}

task update(type: VersionModificationTask) {
}

project.afterEvaluate {
    if (project == rootProject) {
        task downloadBukkit(type: DownloadBukkit) {
            group = "debug"

            Task task = null
            if (compile) {
                project.allprojects.forEach(p -> {
                    if (p.name != "test-plugin" && p.name != "gradle-plugin" && p.tasks.findByName("shadowJar") != null) {
                        if (task != null)
                            task.finalizedBy(p.tasks.shadowJar)
                        else
                            dependsOn(p.tasks.shadowJar)
                        task = p.tasks.shadowJar
                    }
                })
            }

            if (project.childProjects["test-plugin"] != null) {
                if (task != null)
                    task.finalizedBy(":test-plugin:build")
                else
                    dependsOn(":test-plugin:build")
            }
        }

        task runDebugBukkit(type: JavaExec) {
            group = "debug"
            dependsOn(downloadBukkit)
        }
    }
}